#!/usr/bin/perl -w
########################################################################################################
# this script is used to run sequence alignment using PSIBLAST and build sequence interface alignment 
# using the interface defined by iAlign
# Input:
#        cpx.fasta # seq.fasta
#        cpx.pdb   # complex.pdb
#        structure_align.out # generated by iAlign
# Output:
#        sequence_align.out  # generated by this script
########################################################################################################

use strict;
use warnings;
use 5.010;
use Cwd 'abs_path';
use File::Basename;

if(@ARGV != 3){
  printf "Usage: run_seqalign.pl complex.pdb strcuture_align.out sequence_align.out\n";
  exit;
}

my $cpxpdb       = $ARGV[0];
my $struct_align = $ARGV[1];
my $sequen_align = $ARGV[2];

my $binpath = dirname(abs_path(__FILE__));
# database
my $database = "$binpath/STRING/STRING_sequence/protein.sequences.v10.5.fa";
my $string_link_file = "$binpath/STRING/STRING_links700+/protein.links.v10.5.txt";
# programs
my $blast = "$binpath/ncbi-blast-2.7.1+/bin/psiblast";
my $xml2msa = "$binpath/seqalign/xml2msa.pl";
my $build_cpx_alignment = "$binpath/seqalign/build_cpx_alignment";#this is a c program
my $splitdimer = "$binpath/seqalign/splitdimer.pl";
my $build_sequence_align = "$binpath/seqalign/build_seqalign.pl";
my $pdb2fas = "$binpath/seqalign/pdb2fas.pl";

#run psiblast
print "Now run PSI-BLAST to build sequence-based interface profile\n";
print "step 1: run psiblast\n";
`$splitdimer $cpxpdb lig.pdb rec.pdb`;
my $ligchn=`head -1 lig.pdb`;
$ligchn = substr $ligchn,21,1;
my $recchn=`head -1 rec.pdb`;
$recchn = substr $recchn,21,1;
if($ligchn gt $recchn){
  `mv lig.pdb temp.pdb`;
  `mv rec.pdb lig.pdb`;
  `mv temp.pdb rec.pdb`;
}
`$pdb2fas lig.pdb lig.fasta`;
`$pdb2fas rec.pdb rec.fasta`;
#`$blast -query lig.fasta -out lig.xml -db $database -outfmt 5 -evalue 0.001 -max_hsps 1 -num_iterations 3`;
#`$blast -query rec.fasta -out rec.xml -db $database -outfmt 5 -evalue 0.001 -max_hsps 1 -num_iterations 3`;
`$blast -query lig.fasta -out lig.xml -db $database -outfmt 5 -evalue 0.001 -max_hsps 1`;
`$blast -query rec.fasta -out rec.xml -db $database -outfmt 5 -evalue 0.001 -max_hsps 1`;
#convert xml to msa
print "step 2: xml2msa\n";
`$xml2msa  -in lig.xml -out lig.msa`;
`$xml2msa  -in rec.xml -out rec.msa`;
#build whole cpx_alignment using STRING links
print "step 3: build whole cpx_alignment\n";
`$build_cpx_alignment -link  $string_link_file -ligmsa lig.msa -recmsa rec.msa -out cpx_alignment.txt\n`;
#extract interface sequence align
print "step 4: extract interface seqalign\n";
`$build_sequence_align cpx_alignment.txt $struct_align lig.pdb rec.pdb $sequen_align`;
#clean intermediate files in the  directory
print "step 5: clean directory\n";
`rm -rf lig.fasta rec.fasta lig.pdb rec.pdb *.xml *.msa cpx_alignment.txt`;
exit;
